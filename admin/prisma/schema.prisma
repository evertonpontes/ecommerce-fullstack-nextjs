datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Attributes {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Category {
  id          String @id @default(cuid())
  name        String
  description String
  imageUrl    String

  parentId  String?
  parent    Category?  @relation("ParentToChildren", fields: [parentId], references: [id])
  childrens Category[] @relation("ParentToChildren")

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  attributes Attributes[]
  product    Product[]    @relation("CategoryToProduct")
}

model Product {
  id          String  @id @default(cuid())
  name        String
  title       String
  brand       String
  description String
  price       Decimal
  amount      Int
  discount    Decimal // 0 to 1
  keywords    String

  images            ProductImage[]
  productAttributes ProductAttribute[]
  categoryId        String
  category          Category           @relation("CategoryToProduct", fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model ProductAttribute {
  id             String   @id @default(cuid())
  attributeName  String
  attributeValue String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id])
}
