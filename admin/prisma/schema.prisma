datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model Attribute {
  id   String @id @default(uuid())
  name String

  category Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  categoryId String?
}

model Category {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent Category? @relation("ParentToChildren", fields: [parentId], references: [id])

  parentId String?

  subCategories Category[] @relation("ParentToChildren")

  attributes Attribute[]

  products Product[] @relation("CategoryToProduct")

  @@index([slug])
}

enum ProductType {
  single_product
  product_group
  variant_product
}

model Product {
  id                 String      @id @default(uuid())
  name               String
  sku                String      @unique
  description        String
  price              Decimal     @db.Money
  discount           Decimal     @db.Decimal(5, 2) //0 to 100
  stock              Int         @default(0)
  productType        ProductType @default(single_product)
  productAttributes  Json?       @db.Json
  variantCombination Json?       @db.Json
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  images ProductImage[]

  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])

  categoryId String

  productGroup Product? @relation("ProductToVariant", fields: [productGroupId], references: [id])

  productGroupId String?

  hasVariant Product[] @relation("ProductToVariant")

  variesBy Variation[]

  @@index([categoryId], name: "product_category_idx")
}

model ProductImage {
  id  String @id @default(uuid())
  url String

  Product Product @relation(fields: [productId], references: [id])

  productId String

  @@index([productId], name: "image_product_idx")
}

model Variation {
  id   String @id @default(uuid())
  name String
  slug String

  options VariationOption[]

  product Product @relation(fields: [productId], references: [id])

  productId String

  @@index([productId], name: "variation_product_idx")
}

model VariationOption {
  id         String    @id @default(uuid())
  value      String
  optionSlug String
  swatch     Swatch    @relation(fields: [swatchId], references: [id])
  variation  Variation @relation(fields: [variationId], references: [id])

  variationId String
  swatchId    String @unique

  @@index([variationId], name: "option_variantion_idx")
}

model Swatch {
  id                 String      @id @default(uuid())
  swatchType         SwatchType  @default(TEXT) // COLOR | IMAGE | TEXT
  swatchShape        SwatchShape @default(SQUARE) // CIRCLE | SQUARE
  swatchColor        String?
  swatchThumbnailUrl String?
  swatchText         String?

  variationOption VariationOption?
}

// Enum to define display types of swatch
enum SwatchType {
  COLOR
  IMAGE
  TEXT
}

enum SwatchShape {
  CIRCLE
  SQUARE
}
